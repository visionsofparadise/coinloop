openapi: 3.0.3
info:
  title: coinloop
  description: API specification for nodes in the CoinLoop network.
  version: 1.0.0
paths:
  /v1/:
    description: Resource for handling the recipient node.
    get:
      operationId: ping
      summary: Gets the recipient node.
      description: The recipient node will return information about itself. This endpoint
        is used for pings and healthchecks.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '401':
          $ref: '#/components/responses/Unauthorized'
        "5XX":
          $ref: '#/components/responses/InternalError'
  /v1/coins:
    description: Resource for handling coins.
    get:
      operationId: listCoins
      summary: Lists all coins within the queried rangeBits around a coinKey.
      description: The recipient node will return all coins within a give bitwise
        XOR distance around a given coinKey.
      parameters:
      - name: coinKey
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/key'
      - name: rangeBits
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/rangeBits'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coin'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        "5XX":
          $ref: '#/components/responses/InternalError'
    patch:
      operationId: patchCoins
      summary: Creates or updates the provided coins.
      description: The recipient node will create new coins if not found and merge
        with existings coins if they do. The recipient node will return all updated
        coins.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Coin'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coin'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        "5XX":
          $ref: '#/components/responses/InternalError'
  /v1/coins/{coinKey}:
    description: Resource for handling a coin identified by it's coinKey
    get:
      operationId: getCoin
      summary: Gets the requested coin.
      description: The recipient node will return the coin identified by it's coinKey.
      parameters:
      - name: coinKey
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/key'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coin'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        "5XX":
          $ref: '#/components/responses/InternalError'
  /v1/nodes/{nodeKey}:
    description: Resource for handling a node identified by it's nodeKey.
    get:
      operationId: getNode
      summary: Lists the closest nodes to the requested nodeKey.
      description: The recipient node will return the closest nodes it has stored
        to the nodeKey. Clients should recursively use this method to find a target
        node. It is up to clients to measure nodeKey distances to make progress towards
        a target node.
      parameters:
      - name: nodeKey
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/key'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        "5XX":
          $ref: '#/components/responses/InternalError'
  /v1/nodes/{nodeKey}/coins:
    description: Resource for handling a node's coins
    get:
      operationId: listNodeCoins
      summary: Lists all coins that are assigned to a node.
      description: The recipient node will return all coins assigned to a nodeKey.
        A coin is assigned to a node when it's latest consensus transaction points
        to it's nodeKey.
      parameters:
      - name: nodeKey
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/key'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coin'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        "5XX":
          $ref: '#/components/responses/InternalError'
components:
  responses:
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    # values
    hash:
      description: Represents a md5 checksum.
      type: string
      pattern: ^[a-f0-9]+$
      minLength: 32
      maxLength: 32
    key:
      description: Represents a key in the distributed hash table. When referred to
        as 'nodeKey' this represents hash160(publicKey) of a node's identity. When
        referred to as 'coinKey' this represents hash160(nodeKey + nonce) of a proof
        of work.
      type: string
      pattern: ^[a-f0-9]+$
      minLength: 40
      maxLength: 40
    rangeBits:
      description: Represents a bitwise distance.
      type: integer
      format: int32
      minimum: 0
      maximum: 160
    signature:
      description: A signature produced from a node identity private key.
      type: string
      pattern: ^[a-f0-9]+$
      minLength: 144
      maxLength: 144
    # models
    Coin:
      description: Represents a value in the distributed hash table. A coin tracks
        valid transaction chains and commits from other nodes. A node will use commits
        to calculate the current consensus transaction chain.
      type: object
      properties:
        coinKey:
          $ref: '#/components/schemas/key'
        transactionMaps:
          type: array
          items:
            type: object
            additionalProperties:
              oneOf:
              - $ref: '#/components/schemas/Root'
              - $ref: '#/components/schemas/Transfer'
          minItems: 0
          maxItems: 199
        commitMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Commit'
      required:
        - coinKey
        - transactionMaps
        - commitMap
    Commit:
      description: Represents a signed declaration from a node that a target transaction
        is the currently the consensus transaction.
      type: object
      properties:
        targetHash:
          $ref: '#/components/schemas/hash'
        sequenceNumber:
          type: integer
          format: int32
          minimum: 0
          maximum: 4294967295
        proofOfWork:
          $ref: '#/components/schemas/ProofOfWork'
        signature:
          $ref: '#/components/schemas/signature'
      required:
        - targetHash
        - sequenceNumber
        - proofOfWork
        - signature
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Node:
      description: Represents information about a node.
      type: object
      properties:
        version:
          type: integer
          minimum: 1
        nodeKey:
          $ref: '#/components/schemas/key'
        url:
          type: string
          format: uri
        rangeBits:
          $ref: '#/components/schemas/rangeBits'
        proofOfWork:
          $ref: '#/components/schemas/ProofOfWork'
        signature:
          $ref: '#/components/schemas/signature'
      required:
        - version
        - nodeKey
        - url
        - rangeBits
        - proofOfWork
        - signature
    ProofOfWork:
      description: Represents proof of work by a given nodeKey. A proof of work score
        is given by the bitwise distance of hash160(nodeKey + nonce) and the nodeKey.
      type: object
      properties:
        nodeKey:
          $ref: '#/components/schemas/key'
        nonce:
          type: string
          pattern: ^[a-f0-9]+$
          minLength: 64
          maxLength: 64
      required:
        - nodeKey
        - nonce
    Root:
      description: Represents the mining of a new coin and ownership being assigned
        to the proofOfWork nodeKey.
      type: object
      properties:
        proofOfWork:
          $ref: '#/components/schemas/ProofOfWork'
        signature:
          $ref: '#/components/schemas/signature'
      required:
        - proofOfWork
        - signature
    Transfer:
      description: Represents a node from a previous transaction assigning ownership
        to a new nodeKey.
      type: object
      properties:
        index:
          type: integer
          format: int32
          minimum: 1
          maximum: 199
        previousHash:
          $ref: '#/components/schemas/hash'
        nodeKey:
          $ref: '#/components/schemas/key'
        signature:
          $ref: '#/components/schemas/signature'
      required:
        - index
        - previousHash
        - nodeKey
        - signature
